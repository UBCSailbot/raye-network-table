pipeline {
    options {
        // start deleting builds after a certain amount
        // (I don't have that much disk space)
        buildDiscarder(logRotator(numToKeepStr:'100'))
    }

    agent none

    stages {
        // This dummy stage is needed to apply
        // a lock over all the stages.
        // Without this, the build fails when
        // multiple builds are launched.
        // https://issues.jenkins-ci.org/browse/JENKINS-43336
        stage('Wait for other jobs to complete') {
            options {
                lock('can_bbb_nuc')
            }
            agent none
            stages {
                stage ('Cleanup Leftovers') {
                    // sometimes the pkill from another test
                    // can fail, causing a bunch of of leftover
                    // processes to hang around.
                    steps {
                        force_cleanup()
                    }
                }

                stage('Compile BBB') {
                    agent {
                        label 'bbb'
                    }
                    steps {
                        // Make sure canbus is enabled
                        dir("/home/debian/workspace/can_bbb_nuc_integration/") {
                            checkout scm
                            sh 'git submodule update --init --recursive'
                            sh 'git clean -dff'

                            sh '''
                                mkdir -p build
                                cd build
                                cmake ..
                                make
                            '''
                        }
                    }
                }

                stage('Compile NUC') {
                    agent {
                        label 'nuc'
                    }
                    steps {
                        // compile network table.
                        // specifically we want nuc_eth_listener
                        dir('/home/raye/workspace/can_bbb_nuc_integration') {
                            checkout scm
                            sh 'git submodule update --init --recursive'
                            sh 'git clean -dff'
                            sh '''
                                set +x
                                source /opt/ros/melodic/setup.bash
                                mkdir -p build
                                cd build
                                cmake .. -DENABLE_ROS:BOOL=ON
                                make clean
                                make -j6
                            '''
                        }

                        // compile bruces controller code.
                        // TODO: This is not handled by git/jenkins at all. Changes
                        // to this code will not appear here.
                        dir('/home/raye/catkin_ws') {
                            sh '''
                                set +x
                                source /opt/ros/melodic/setup.bash
                                catkin_make clean
                                catkin_make
                            '''
                        }
                    }
                }

                stage('Compile Land Server') {
                    agent {
                        label 'master'
                    }
                    steps {
                        // TODO: Make sure canbus is enabled
                        dir("/var/lib/jenkins/workspace/can_bbb_nuc_integration/") {
                            checkout scm
                            sh 'git submodule update --init --recursive'
                            sh 'git clean -dff'
                            sh '''
                                mkdir -p build
                                cd build
                                cmake ..
                                make
                            '''
                        }
                        // compile global pathfinding
                        dir("/var/lib/jenkins/workspace/can_bbb_nuc_integration/projects/global-pathfinding/") {
                            sh '''
                                mkdir -p build
                                cd build
                                cmake ..
                                make
                            '''
                        }
                    }
                }

                stage('Run BBB') {
                    agent {
                        label 'bbb'
                    }
                    steps {
                        dir("/home/debian/workspace/can_bbb_nuc_integration/") {
                            sh 'JENKINS_NODE_COOKIE=nokill nohup /usr/bin/socat -d -d pty,raw,echo=0,link=/tmp/serialport1 pty,raw,echo=0,link=/tmp/serialport2 &'
                            sh 'JENKINS_NODE_COOKIE=nokill nohup ./build/bin/network_table_server > network_table_server.log &'
                            sh 'JENKINS_NODE_COOKIE=nokill nohup ./build/bin/bbb_eth_listener 192.168.1.60 5555 > bbb_eth_listener.log &'
                            sh 'JENKINS_NODE_COOKIE=nokill nohup ./build/bin/bbb_canbus_listener vcan0 > bbb_canbus_listener.log &'
                            sh 'JENKINS_NODE_COOKIE=nokill nohup ./build/bin/bbb_satellite_listener 2 2 2 /tmp/serialport1 > bbb_satellite_listener.log &'
                            sh 'JENKINS_NODE_COOKIE=nokill nohup ./projects/virtual_iridium/python/Iridium9602.py --webhook_server_endpoint 10.0.0.1:8000 --http_server_port 8085 -d /tmp/serialport2 -m HTTP_POST > virtual_iridium.log &'

                            // Run this here so that we have gps coordinates in the network table and global pathfinding will work properly
                            sh 'JENKINS_NODE_COOKIE=nokill nohup ./scripts/mock_sensors.py -c vcan0 -f recorded_data/mock_can_data.csv --loop &'
                        }
                    }
                }

                stage('Run NUC') {
                    agent {
                        label 'nuc'
                    }
                    steps {
                        dir('/home/raye/workspace/can_bbb_nuc_integration') {
                            sh '''
                                set +x
                                source /opt/ros/melodic/setup.bash
                                JENKINS_NODE_COOKIE=nokill nohup /opt/ros/melodic/bin/roscore &
                            '''
                            // roscore takes a while to startup.
                            // without this, nuc_eth_listener may get "failed to contact master"
                            sleep(5)
                            sh '''
                                set +x
                                source /opt/ros/melodic/setup.bash
                                JENKINS_NODE_COOKIE=nokill nohup ./build/bin/nuc_eth_listener 192.168.1.60 5555 > nuc_eth_listener.log &
                            '''
                            sh '''
                                set +x
                                source /opt/ros/melodic/setup.bash
                                source /home/raye/catkin_ws/devel/setup.sh
                                JENKINS_NODE_COOKIE=nokill nohup /opt/ros/melodic/bin/rosrun raye_communication raye_communication_node &
                            '''
                            sh '''
                                set +x
                                source /opt/ros/melodic/setup.bash
                                source /home/raye/catkin_ws/devel/setup.sh
                                JENKINS_NODE_COOKIE=nokill nohup /opt/ros/melodic/bin/rosrun local_pathfinding main_loop.py &
                            '''
                        }
                    }
                }

                stage('Run Land Server') {
                    agent {
                        label 'master'
                    }
                    steps {
                        dir("/var/lib/jenkins/workspace/can_bbb_nuc_integration/") {
                            sh 'JENKINS_NODE_COOKIE=nokill nohup ./build/bin/network_table_server > network_table_server.log &'
                            sh './build/bin/init_gps_coords'
                            sh 'JENKINS_NODE_COOKIE=nokill nohup ./projects/land_satellite_listener/land_satellite_listener.py -p 8000 -e http://10.0.0.3:8085 -f 5 -u SEC --bind 10.0.0.1 > land_satellite_listener.log &'
                        }
                        dir("/var/lib/jenkins/workspace/can_bbb_nuc_integration/projects/global-pathfinding/") {
                            sh './build/bin/pathfinder_cli -p 8 --table --navigate 21 203 > global_pathfinding.log 2>&1'
                        }
                    }
                }

                stage ('Run BBB tests') {
                    agent {
                        label 'bbb'
                    }
                    steps {
                        dir("/home/debian/workspace/can_bbb_nuc_integration/") {
                            sh './scripts/canbus_data_checker.py -c vcan0'
                        }
                    }
                }

                stage ('Report logs BBB') {
                    agent {
                        label 'bbb'
                    }
                    steps {
                        dir("/home/debian/workspace/can_bbb_nuc_integration/") {
                            echo "======== BBB network_table_server ========"
                            sh 'cat network_table_server.log'
                            echo "======== BBB bbb_eth_listener ========"
                            sh 'cat bbb_eth_listener.log'
                            echo "======== BBB bbb_canbus_listener ========"
                            sh 'cat bbb_canbus_listener.log'
                            echo "======== BBB bbb_satellite_listener ========"
                            sh 'cat bbb_satellite_listener.log'
                            echo "======== BBB virtual_iridium ========"
                            sh 'cat virtual_iridium.log'
                        }
                    }
                }

                stage ('Report logs NUC') {
                    agent {
                        label 'nuc'
                    }
                    steps {
                        dir('/home/raye/workspace/can_bbb_nuc_integration') {
                            echo "======== NUC nuc_eth_listener ========"
                            sh 'cat nuc_eth_listener.log'
                        }
                    }
                }

                stage ('Report logs Land Server') {
                    agent {
                        label 'master'
                    }
                    steps {
                        dir("/var/lib/jenkins/workspace/can_bbb_nuc_integration/") {
                            echo "======== Land Server network_table_server ========"
                            sh 'cat network_table_server.log'
                            echo "======== Land Server land_satellite_listener ========"
                            sh 'cat land_satellite_listener.log'
                        }
                        dir("/var/lib/jenkins/workspace/can_bbb_nuc_integration/projects/global-pathfinding/") {
                            echo "======== Land Server global pathfinding ========"
                            sh 'cat global_pathfinding.log'
                        }
                    }
                }

                stage ('Cleanup') {
                    steps {
                        cleanup()
                    }
                }
            }
        }
    }
}

// always succeeds
def force_cleanup() {
    // Cleanup processes on BBB
    node('bbb') {
        script {
            sh 'pkill -f network_table_server || true'
            sh 'pkill -f bbb_eth_listener || true'
            sh 'pkill -f bbb_canbus_listener || true'
            sh 'pkill -f bbb_satellite_listener || true'
            sh 'pkill -f Iridium9602 || true'
            sh 'pkill -f mock_sensors || true'
            sh 'pkill -f socat || true'
            sh 'rm -r /tmp/sailbot/ || true'
        }
    }
    // Cleanup processes on NUC
    node('nuc') {
        script {
            sh 'pkill -f roscore || true'
            sh 'pkill -f nuc_eth_listener || true'
            sh 'pkill -f raye_communication_node || true'
            sh 'pkill -f main_loop || true'
        }
    }
    // Cleanup processes on Land Server
    node('master') {
        script {
            sh 'pkill -f network_table_server || true'
            sh 'pkill -f land_satellite_listener || true'
        }
    }
}

def cleanup() {
    // Cleanup processes on BBB
    node('bbb') {
        script {
            sh 'pkill -f network_table_server || echo "error: failed to kill network_table_server"'
            sh 'pkill -f bbb_eth_listener || echo "error: failed to kill bbb_eth_listener"'
            sh 'pkill -f bbb_canbus_listener || echo "error: failed to kill bbb_canbus_listener"'
            sh 'pkill -f bbb_satellite_listener || echo "error: failed to kill bbb_satellite_listener"'
            sh 'pkill -f Iridium9602 || echo "error: failed to kill Iridium9602"'
            sh 'pkill -f mock_sensors || echo "error: failed to kill mock_sensor"'
            sh 'pkill -f socat || echo "error: failed to kill socat"'
            sh 'rm -r /tmp/sailbot/'
        }
    }
    // Cleanup processes on NUC
    node('nuc') {
        script {
            sh 'pkill -f roscore || echo "error: failed to kill roscore"'
            sh 'pkill -f nuc_eth_listener || echo "error: failed to kill nuc_eth_listener"'
            sh 'pkill -f raye_communication_node || echo "error: failed to kill raye_communication_node"'
            sh 'pkill -f main_loop.py || echo "error: failed to kill main_loop.py"'
        }
    }
    // Cleanup processes on Land Server
    node('master') {
        script {
            sh 'pkill -f network_table_server || echo "error: failed to kill network_table_server"'
            sh 'pkill -f land_satellite_listener || echo "error: failed to kill land_satellite_listener"'
        }
    }
}
